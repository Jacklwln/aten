/*
	*** Viewer - GL Drawing class based on QOpenGLWidget
	*** src/gui/viewer.hui
	Copyright T. Youngs 2007-2015

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_VIEWER_H
#define ATEN_VIEWER_H

#include <QtWidgets/QOpenGLWidget>
#include <QOpenGLFunctions>
#include <QOffscreenSurface>
#include <QObject>
#include "base/atom.h"
#include "base/messenger.h"
#include "gui/useractions.h"
#include "base/log.h"
#include "render/primitiveset.h"
#include "render/rendergroup.h"
#include "render/primitiveinfo.h"
#include "render/textprimitivelist.h"
#include "base/namespace.h"
#include "templates/array.h"

ATEN_USING_NAMESPACE

// Forward Declarations (Qt)
class AtenWindow;

ATEN_BEGIN_NAMESPACE

// Forward Declarations
class Aten;
class Model;

// Base rendering widget
class Viewer : public QOpenGLWidget, protected QOpenGLFunctions
{
	Q_OBJECT

	public:
	// Constructor / Destructor
	Viewer(QWidget *parent);
	~Viewer();


	/*
	 * Character / Setup
	 */
	private:
	// Pointer to Aten
	Aten* aten_;
	// Pointer to AtenWindow
	AtenWindow* atenWindow_;
	// Width, height, and aspect ratio of the canvas
	GLsizei contextWidth_, contextHeight_;
	// Flag to indicate whether we may draw to the context
	bool valid_;
	// Flag indicating if we are currently drawing to this context
	bool drawing_;
	// Flag specifying whether we are currently rendering offscreen
	bool renderingOffScreen_;
	// Line width scaling factor to use (to adjust line width when saving images)
	double lineWidthScaling_;
	// Height, in pixels, of single line of text
	int fontPixelHeight_;

	public:
	// Set pointer to Aten
	void setAten(Aten* aten);
	// Set pointer to AtenWindow
	void setAtenWindow(AtenWindow* atenWindow);
	// Return the current height of the drawing area
	GLsizei contextHeight() const;
	// Return the current width of the drawing area
	GLsizei contextWidth() const;
	// Check for GL error
	void checkGlError();
	// Set line width and text scaling to use
	void setObjectScaling(double scaling);
	
	public:
	// Determine target model based on clicked position on TCanvas
	Model* modelAt(int x, int y);
	// Return height, in pixels, of single line of text
	int fontPixelHeight();


	/*
	 * Mouse Input
	 */
	private:
	// Button flags (uses enum 'MouseButton')
	bool mouseButton_[Prefs::nMouseButtons];
	// Canvas coordinates of mouse down / mouse up events
	Vec3<double> rMouseUp_, rMouseDown_;
	// Canvas coordinates of mouse cursor
	Vec3<double> rMouseLast_;
	// Whether the mouse has moved between mose press and release events
	bool mouseHasMoved_;

	protected:
	// Qt Virtual (mouse press event)
	void mousePressEvent(QMouseEvent* event);
	// Qt Virtual (mouse release event)
	void mouseReleaseEvent(QMouseEvent* event);
	// Qt Virtual (mouse move event)
	void mouseMoveEvent(QMouseEvent* event);
	// Qt Virtual (mouse wheel event)
	void wheelEvent(QWheelEvent* event);

	public:
	// Return mouse coordinates at last mousedown event
	Vec3<double> rMouseDown();
	// Return mouse coordinates at last mouseup event
	Vec3<double> rMouseUp();
	// Return mouse coordinates at last mousemove event
	Vec3<double> rMouseLast();
	// Return whether the mouse has moved between mouse press and release events
	bool mouseHasMoved();


	/*
	 * Key Input
	 */
	private:
	// Key flags (set by Gui::informMouseDown and used by Viewer::beginMode)
	bool keyModifier_[Prefs::nModifierKeys];
	
	public:
	// Return state of specified keymodifier
	bool keyModifier(Prefs::ModifierKey mk);

	public slots:
	// Qt Slot (key press event)
	void keyPressEvent(QKeyEvent* event);
	// Qt Slot (key release event)
	void keyReleaseEvent(QKeyEvent* event);


	/*
	 * Scene Rendering
	 */
	public:
	// Primitive Quality
	enum PrimitiveQuality { LowQuality, HighQuality };
	// Stick objects for rendering
	enum LineObject { NormalLineObject, SelectedLineObject, NormalGuiLineObject, SelectedGuiLineObject, nLineObjects };
	// Glyph triangle style
	enum GlyphTriangleStyle { SolidTriangle, WireTriangle, nTriangleStyles };

	private:
	// Local copy of model transformation matrix
	Matrix modelTransformationMatrix_;
	// Primitive sets for on and offscreen rendering
	PrimitiveSet primitives_[2];
	// Current source primitive set
	Viewer::PrimitiveQuality primitiveSet_;

	private:
	// Setup basic GL properties
	void setupGL();
	// Render messages
	void renderMessages(QPainter& painter);
	// Render full scene
	void renderFullScene(int contextWidth = -1, int contextHeight = -1, int xOffset = 0, int yOffset = 0);

	protected:
	// Initialise context widget (when created by Qt)
	void initializeGL();
	// Repaint
	void paintGL();
	// Resize function
	void resizeGL(int width, int height);

	public:
	// Update all primitives (following prefs change, etc.)
	void updatePrimitives(PrimitiveQuality targetSet);


	/*
	 * Object Rendering Functions
	 */
	private:
	// Local RenderGroup, for useractions etc.
	RenderGroup renderGroup_;

	private:
	// Render full model in specified viewport
	void renderModel(Model* source, int viewPortX, int viewPortY, int viewPortWidth, int viewPortHeight, bool drawRotationGlobe);
	// Render active mode embellishments
	void renderActiveModes(Model* currentModel);
	// Render addition elements related to selected/active UserActions
	void renderUserActions(Model* source);
	// Render addition elements related to visible windows
// 	void renderWindowExtras(Model* source);		// ATEN2 TODO


	/*
	 * Offscreen Rendering
	 */
	private:
	// Offscreen context
        QOpenGLContext offscreenContext_;
	// Offscreen surface
	QOffscreenSurface offscreenSurface_;

	public:
	// Grab current contents of framebuffer
	QPixmap frameBuffer();
	// Generate image of specified model
	QPixmap generateModelImage(Model* model, int width, int height);
	// Render current scene at supplied size
	QPixmap generateImage(int imageWidth, int imageHeight);
};

ATEN_END_NAMESPACE

#endif
