/*
	*** ColourScale Editor
	*** src/gui/tcolourscaleeditor.hui
	Copyright T. Youngs 2016-2018

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_COLOURSCALEEDITOR_H
#define ATEN_COLOURSCALEEDITOR_H

#include "base/colourscale.h"
#include <QWidget>

// Forward declarations
class QStyleOption;

// ColourScale Editor
class TColourScaleEditor : public QWidget
{
	Q_OBJECT

	public:
	// Constructor
	TColourScaleEditor(QWidget* parent);


	/*
	 * Data
	 */
	private:
	// Local ColourScale to display / edit
	ColourScale colourScale_;

	public:
	// Set colourscale to display
	void setColourScale(const ColourScale& colourScale);
	// Return local colourscale
	ColourScale colourScale();


	/*
	 * Widget Functions
	 */
	private:
	// Local mouse regions
	enum TColourScaleEditorRegion { NoRegion, GradientRegion, HandleRegion };
	// Local QGradient, constructed from ColourScale
	QLinearGradient gradient_;
	// Whether mouse button is currently down on the widget
	bool mouseDown_;
	// Last position of mouse over widget
	QPoint lastPos_;
	// Current region that the mouse is over
	TColourScaleEditorRegion currentRegion_;
	// Defined gradient bar region
	QRegion gradientBarRegion_;
	// Defined handle region
	QRegion handleRegion_;
	// Defined label region
	QRegion labelRegion_;
	// Current colourscale point being hovered over (if any)
	ColourScalePoint* hoverColourScalePoint_;
	// Current colourscale point that is the subject of interaction
	ColourScalePoint* currentColourScalePoint_;

	private:
	// Convert gradient bar position to colourscale value
	double gradientBarValue(QPoint pos);
	// Return ColourScalePoint corresponding to handle under mouse (if any)
	ColourScalePoint* handleUnderMouse(QPoint pos);
	// Return ColourScalePoint corresponding to label under mouse (if any)
	ColourScalePoint* labelUnderMouse(QPoint pos);
	// Update QGradient for display
	void updateGradient();

	protected:
	// Handle drawing
	void drawHandle(QStyleOption& styleOption, QPainter& painter);
	// Paint event
	void paintEvent(QPaintEvent* event);
	// Size hint
	QSize sizeHint() const;
	// Minimum size hint
	QSize minimumSizeHint() const;
	// Mouse handling
	void mousePressEvent(QMouseEvent* event);
	void mouseMoveEvent(QMouseEvent* event);
	void mouseReleaseEvent(QMouseEvent* event);
	void mouseDoubleClickEvent(QMouseEvent* event);

	private slots:
	// Context menu
	void contextMenuRequested(const QPoint& point);

	signals:
	void colourScaleChanged();
};

#endif
