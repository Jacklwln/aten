/*
	*** TMenuButton - QToolButton with custom handling of mousepress/release events
	*** src/gui/tmenubutton.hui
	Copyright T. Youngs 2007-2016

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_TMENUBUTTON_H
#define ATEN_TMENUBUTTON_H

#include <QToolButton>
#include <QTimer>
#include "gui/tmenubuttongroup.h"
#include "parser/returnvalue.h"
#include "gui/useractions.h"

// Forward Declarations (Qt)
class TPopupWidget;
class AtenWindow;
class QStyleOption;

ATEN_USING_NAMESPACE

// Menu button with optional drop-down (popup) menu
class TMenuButton : public QToolButton
{
	Q_OBJECT
	
	public:
	// Constructor
	TMenuButton(QWidget* parent = 0);
	// Popup Location
	enum PopupLocation { PopupOnLeft, PopupOnRight, PopupOnTop, PopupOnBottom };


	/*
	 * Link to AtenWindow
	 */
	private:
	// Pointer to Aten
	static AtenWindow* atenWindow_;

	public:
	// Set pointer to AtenWindow
	static void setAtenWindow(AtenWindow* atenWindow);


	/*
	 * Button
	 */
	private:
	// User-assigned index of button
	int index_;

	public:
	// Return user-assigned index of button
	int index();


	/*
	 * Definition
	 */
	private:
	// Popup widget
	TPopupWidget* popupWidget_;
	// Whether popup is instant when button is pressed
	bool instantPopup_;
	// Timer for popup window
	QTimer popupTimer_;
	// Whether button was already checked before being pressed
	bool checkedBeforePressed_;
	// Where the popup (if any) should be located relative to the button
	TMenuButton::PopupLocation popupLocation_;

	public:
	// Set popup widget for button
	void setPopupWidget(TPopupWidget* widget, bool instantPopup = false);
	// Return popup widget set for button
	TPopupWidget* popupWidget();
	// Set where the popup (if any) should be located relative to the button
	void setPopupLocation(TMenuButton::PopupLocation location);
	// Call named method in associated popup widget
	bool callPopupMethod(QString methodName, ReturnValue& rv);
	// Notify button that popup is done
	void popupDone(bool setButtonDown, UserAction::Action setActionToEnable = UserAction::NoAction);
	// Notify button that the popup has been hidden
	void popupWidgetHidden();
	// Notify button that a widget on the popup has been changed
	void popupWidgetChanged(int data);


	/*
	 * Widget Functions
	 */
	protected:
	void paintEvent(QPaintEvent* event);
	void drawEllipsis(QStyleOption& style, QPainter& painter);

	public:
	QSize sizeHint() const;

	private slots:
	// Mouse button was pressed on the button
	void buttonPressed();
	// Mouse button was released
	void buttonReleased();

	public slots:
	// Call popup widget
	void popup();

	public:
	// Return whether popup (if there is one) is visible
	bool popupVisible();

	signals:
	void popupHidden();
	void popupChanged(int data);


	/*
	 * Group
	 */
	private:
	// List of available groups
	static List<TMenuButtonGroup> groups_;
	// Group to which this button belongs (if any)
	TMenuButtonGroup* group_;

	public:
	// Add this button to the named group
	void setGroup(QString groupName, int index = -1);
	// Check specified button in specified group
	static bool setGroupButtonChecked(QString groupName, int buttonIndex);
};

#endif

