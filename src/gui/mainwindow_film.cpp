/*
	*** Main Window - Film Functions
	*** src/gui/mainwindow_film.cpp
	Copyright T. Youngs 2007-2015

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "gui/mainwindow.h"
#include "main/aten.h"

// Export film
bool AtenWindow::exportFilm()
{
	// Basic variables
	int indexWidth = 7;

	// Get relevant info for film
	EncoderDefinition* encoder = exportFilmDialog_.encoder();
	int imageWidth = exportFilmDialog_.filmWidth();
	int imageHeight = exportFilmDialog_.filmHeight();
	int fps = exportFilmDialog_.fps();

	// What to do?
	// We will always save the images, regardless of the type of output we're doing - the only difference will be the basename/location
	QString imageBasename;
	QString imageExtension;
	
	if (exportFilmDialog_.outputImages())
	{
		imageBasename = exportFilmDialog_.imageBasename();
		imageExtension = exportFilmDialog_.imageExtension();
	}
	else
	{
		// Always generate png images
		imageExtension = "png";

		// Generate unique run number id for image file saving
		int runid;
		do
		{
			runid = AtenMath::randomimax();
			imageBasename = prefs.tempDir().absoluteFilePath(QString("aten-filmexport-%1").arg(runid, 9, 10, QChar('0')));
		}
		while (QFileInfo::exists(QString("%1-%2.%3").arg(imageBasename).arg(0, indexWidth, 10, QChar('0')).arg(imageExtension)));
	}

	// Almost ready!
	Model* model = aten_.currentModelOrFrame();
	int startIndex, endIndex, nFrames;

	// Check setup for selected source, and construct the script. The script will be constructed as follows, using global variables to have any necessary persistent
	// values between frames. A function called 'next' will be called after each image is saved.
	QStringList scriptStrings;

	// Always need global frameIndex variable
	scriptStrings << "    int next(int frameIndex) {";
	scriptStrings << "printf(\"HELLOHEREWEARE frameIndex = %i\n\", frameIndex);";

	// Get start and end frame indices, and add necessary code to script
	if (exportFilmDialog_.viewSource())
	{
		startIndex = 1;
		endIndex = exportFilmDialog_.viewNFrames();
	}
	else if (exportFilmDialog_.trajectorySource())
	{
		// Double-check that current model has a trajectory
		if (!model->hasTrajectory())
		{
			Messenger::error("Trajectory film requested, but none associated to current model.");
			return false;
		}

		startIndex = exportFilmDialog_.trajectoryStartFrame();
		endIndex = exportFilmDialog_.trajectoryEndFrame();

		scriptStrings << "seekFrame(frameIndex);";
	}
	else if (exportFilmDialog_.vibrationSource())
	{
		// ATEN2 TODO
	}
	nFrames = (endIndex - startIndex) + 1;

	// Add on view rotation if requested
	if (exportFilmDialog_.rotateView())
	{
		Vec3<bool> rotateAxis = exportFilmDialog_.rotateViewAxes();
		Vec3<bool> rotateWhole = exportFilmDialog_.rotateViewWhole();
		Vec3<double> rotationDelta = exportFilmDialog_.rotateViewDeltas();
		Vec3<double> rotationWhole = exportFilmDialog_.rotateViewWholeRotations();

		// Add commands to script
		for (int n=0; n<3; ++n)
		{
			if (!rotateAxis[n]) continue;

			// Calculate rotation deltas if using whole numbers of rotations
			if (!rotateWhole[n]) rotationDelta[n] = (rotationWhole[n]*360.0) / nFrames;

			if (n == 0) scriptStrings << QString("rotateView(%1, 0.0);").arg(rotationDelta[n]);
			else if (n == 1) scriptStrings << QString("rotateView(0.0, %1);").arg(rotationDelta[n]);
			else if (n == 2) scriptStrings << QString("zRotateView(%1);").arg(rotationDelta[n]);
		}
	}

	scriptStrings << "}";

	// Compile script. and grab necessary functions from script
	Program filmScript;
	if (!filmScript.generateFromStringList(scriptStrings, "Film Script", "Script generated by exportFilm()", false))
	{
		Messenger::error("Failed to create film script.");
		return false;
	}

	Tree* nextFunction = filmScript.findFunction("next");
	if (!nextFunction)
	{
		Messenger::error("Failed to find required 'next' function in film script.");
		return false;
	}

	// Ready - loop over start/end frame range. Save images and build up image list
	QStringList frameImages;
	ReturnValue rv;
	for (int frame = startIndex; frame <= endIndex; ++frame)
	{
		// Generate image filename
		QString imageFilename = QString("%1-%2.%3").arg(imageBasename).arg(frame, indexWidth, 10, QChar('0')).arg(imageExtension);
		frameImages << imageFilename;

		// Generate and save image
		QPixmap pixmap = scenePixmap(imageWidth, imageHeight);
		if (!pixmap.save(imageFilename, qPrintable(imageExtension), -1))
		{
			Messenger::error("Failed to save image '%s'.", qPrintable(imageFilename));
			return false;
		}

		// Run script commands
		rv.set(frame);
		filmScript.executeFunction("next", rv, "i", frame);
	}

	return true;
}




// 	// Generate unique file basename and initialise image redirection
// 	int runid;
// 	QString basename;
// 	do
// 	{
// 		runid = AtenMath::randomimax();
// 		basename = prefs.tempDir().filePath("aten-movie-%1-%2-%3.arc").arg(QApplication::applicationPid(), runid).arg(0, 9, 10, QChar('0'));
// 		fileInfo.setFile(basename);
// 	} while (fileInfo.exists());
// // 	basename.sprintf("%s%caten-movie-%i-%i-%%09i.png", qPrintable(prefs.tempDir()), PATHSEP, parent_.pid(), runid); ATEN2 TODO
// 	parent_.aten().initialiseFilmRedirect(basename, maxframes);
// 	
// 	int progid = progress.initialise("Saving scripted movie frames...", -1);
// 	bool canceled = false;
// 	ReturnValue rv;
// 	script.execute(rv);
// 
// 	progress.terminate(progid);
// 	prefs.setViewRotationGlobe(viewglobe);
// 
// 	// Now run external program to create movie
// 	TProcess encoderProcess;
// 
// 	// Grab encoder command and replace
// 	basename = prefs.tempDir().filePath("aten-movie-%1-%2-*.png").arg(QApplication::applicationPid(), runid);
// 	QString encoderArgs = prefs.encoderArguments();
// 	encoderArgs.replace("OUTPUT", qPrintable(filename));
// 	encoderArgs.replace("FILES", basename);
// 	encoderArgs.replace("FPS", QString::number(fps));
// 	Messenger::print("Command to run will be '%s %s'", qPrintable(prefs.encoderExe()), qPrintable(encoderArgs));
// 	if (!encoderProcess.execute(prefs.encoderExe(), qPrintable(encoderArgs), NULL))
// 	{
// 		Messenger::print("Error: Failed to run encoder command.");
// 		return;
// 	}
// 
// 	// Follow output here...
// 	while (!encoderProcess.finished())
// 	{
// 		// Is output file already present?
// 		while (encoderProcess.outputAvailable()) encoderProcess.printLineToMessages();
// 		QCoreApplication::processEvents(QEventLoop::AllEvents, 50);
// 	}
// 
// 	// Run secondary, post-process command (if one was given)
// 	if (prefs.encoderPostExe() != NULL)
// 	{
// // 		printf("Post encoder command given is [%s]\n", prefs.encoderPostExe());
// 		TProcess postProcess;
// 		// Grab encoder command and replace
// 		QString encoderArgs = prefs.encoderPostArguments();
// 		encoderArgs.replace("OUTPUT", qPrintable(filename));
// 		encoderArgs.replace("FILES", basename);
// 		encoderArgs.replace("FPS", QString::number(fps));
// 		Messenger::print("Command to run will be '%s %s'", qPrintable(prefs.encoderPostExe()), qPrintable(encoderArgs));
// 		if (!postProcess.execute(prefs.encoderPostExe(), encoderArgs, NULL))
// 		{
// 			Messenger::print("Error: Failed to run encoder post-processing command.");
// 		}
// 		else while (!postProcess.finished())
// 		{
// 			// Is output file already present?
// 			while (postProcess.outputAvailable()) postProcess.printLineToMessages();
// 			QCoreApplication::processEvents(QEventLoop::AllEvents, 50);
// 		}
// 	}
// 
// 	// Cancel image redirection and perform cleanup
// 	int nframes = parent_.aten().cancelFilmRedirect();
// 	bool pid = progress.initialise("Cleaning up...", nframes);
// 	for (int n = 0; n < nframes; ++n)
// 	{
// 		basename = prefs.tempDir().filePath("aten-movie-%1-%2-%3.arc").arg(QApplication::applicationPid(), runid).arg(n, 9, 10, QChar('0'));
// 		QFile::remove(basename);
// 		if (!progress.update(pid,n)) break;
// 	}
// 	Messenger::terminateTask(task);
// }

