/*
	*** Messaging Routines
	*** src/base/messenger.h
	Copyright T. Youngs 2007-2015

	This file is part of Aten.

	Aten is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Aten is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Aten.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ATEN_TASK_H
#define ATEN_TASK_H

// #include "base/namespace.h"
#include <QDateTime>
#include <QProcess>
#include <QFile>
#include <QTextStream>

// Forward Declarations (Aten)
/* none */

// Task
class Task : public QProcess
{
	Q_OBJECT

	public:
	// Constructor
	Task();
	// Task type
	enum TaskType { SteppedTask, ExternalTask };


	/*
	 * Basic Data
	 */
	private:
	// Type of task
	TaskType type_;
	// Title of task
	QString title_;
	// Timestamp of task creation
	QDateTime startTime_;
	// Flag indicating task has been canceled
	bool canceled_;

	public:
	// Return type of task
	Task::TaskType type();
	// Return title
	QString title();
	// Return estimated time until completion of task (as string)
	QString etaText();
	// Return timestamp of task creation
	QDateTime startTime();
	// Cancel task (set flag)
	void cancel();
	// Return if task has been canceled
	bool canceled();


	/*
	 * Stepped Task
	 */
	private:
	// Number of steps in task*/
	int nSteps_;
	// Current step in task
	int currentStep_;
	// Percentage completion
	double completion_;
	// Timestamp of last completed step
	QDateTime lastStepTime_;

	public:
	// Initialise task
	void initialise(QString title, int nSteps);
	// Return total number of steps in task
	int nSteps();
	// Return current step in task
	int currentStep();
	// Return timestamp of last completed step
	QDateTime lastStepTime();
	// Return percentage completion
	double completion();
	// Update task, returning if canceled by the user
	bool update(int newCurrentStep);
	// Increment task progress, returning if canceled by the user
	bool increment(int deltaSteps = 1);


	/*
	 * External Command
	 */
	private:
	// Local flag (set by finished() signal) stating whether process has finished and returned
	bool commandFinished_;
	// Whether command failed
	bool commandFailed_;
	// Local file object, pointing to output file of process (if relevant)
	QFile commandOutputFile_;
	// Wwhether an output file was specified
	bool commandOutputFileSpecified_;
	// Local textstream object for reading local file
	QTextStream commandStream_;
	// QByteArray containing stdout output (if any)
	QByteArray commandStdOutput_;

	public slots:
	void processFinished(int exitCode, QProcess::ExitStatus exitStatus);

	public:
	// Execute command with supplied arguments and follow output file (if provided)
	bool initialiseCommand(QString title, QString command, QString args, QString outputfile);
	// Return whether command process is finished
	bool commandFinished();
	// Return whether command failed
	bool commandFailed();
	// Return whether new (any) output is available for reading from the output file
	bool commandOutputAvailable();
	// Send next line from output file to Messenger
	void printLineToMessages();
};

#endif
